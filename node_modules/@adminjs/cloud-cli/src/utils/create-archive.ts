import { lstat, readFile } from 'fs/promises';
import { createWriteStream } from 'fs';

import archiver from 'archiver';
import chalk from 'chalk';

import { PACKAGE_NAME } from '../constants.js';

import getProjectPwd from './get-project-pwd.js';
import type { CloudConfiguration } from './load-configuration.js';

const createArchive = async (configuration: CloudConfiguration) => {
  console.log(chalk.blueBright('Packaging...'));

  const { include: files } = configuration;

  const archive = archiver('tar', {
    zlib: { level: 9 },
  });
  const cwd = getProjectPwd();

  const fileName = `${PACKAGE_NAME}.tar`;
  const filePath = `${cwd}/${fileName}`;
  const output = createWriteStream(filePath);

  archive.pipe(output);

  const entries = await Promise.all(files.map(async (file) => {
    const stat = await lstat(file);
    const isDirectory = stat.isDirectory();
    const isFile = stat.isFile();

    if (!isFile && !isDirectory) return false;

    if (isFile) {
      archive.file(file, { name: file });
    }

    if (isDirectory) {
      archive.directory(file, file);
    }

    return true;
  }));

  entries.forEach((isValidEntry, index) => {
    if (!isValidEntry) {
      console.log(chalk.red(`Invalid entry: ${files[index]}`));
    } else {
      console.log(chalk.blueBright(`Packaged a file/directory: ${files[index]}`));
    }
  });

  await archive.finalize();
  output.end();

  console.log(chalk.green(`Package created: ${fileName}`));

  const file = await readFile(filePath);

  return { file, fileName, filePath };
};

export default createArchive;
