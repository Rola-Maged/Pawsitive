import fs from 'fs';
import path from 'path';
import os from 'os';

import chalk from 'chalk';

import { PKG_ROOT } from '../constants.js';
import {
  getProjectPwd,
} from '../utils/index.js';
import ApiClient from '../api.js';

export type DeployCommandArgs = {
  name: string;
  database: string;
  apiKey: string;
  apiSecret: string;
};

const create = async (opts: DeployCommandArgs): Promise<void> => {
  const { apiKey, apiSecret, name, database } = opts;
  const srcDir = path.join(PKG_ROOT, 'template/base');
  const cwd = getProjectPwd();

  if (!name) {
    console.log(chalk.red('Provide name for the Project'));
    return process.exit(1);
  }

  if (!database) {
    // eslint-disable-next-line max-len
    console.log(chalk.red('Provide DB connection string like "--database=postgres://adminjs:adminjs@localhost:5432/adminjs"'));
    return process.exit(1);
  }

  if (!apiKey) {
    console.log(chalk.red('Provide apiKey for the Project'));
    return process.exit(1);
  }

  if (!apiSecret) {
    console.log(chalk.red('Provide apiSecret for the Project'));
    return process.exit(1);
  }

  console.log(chalk.blueBright(`Creating the project ${chalk.blueBright(name)}`));

  const api = ApiClient({ apiKey, apiSecret });

  if (await api.validate()) {
    const dirName = createDirectory(`${name}`);
    copyDirectory(srcDir, `${cwd}/${dirName}`);
    replaceValueInEnvFile(`${cwd}/${dirName}`, 'POSTGRES_DATABASE_URL', database);
  } else {
    return process.exit(1);
  }
};

const createDirectory = (pathName: string): string => {
  const __dirname = path.resolve();
  pathName = pathName.replace('/^\\.*\\/|\\/?[^\\/]+\\.[a-z]+|\\/$/g', '');
  fs.mkdir(path.resolve(__dirname, pathName), { recursive: true }, (e) => {
    if (e) {
      console.error(e);
    } else {
      console.log(chalk.green('The directory has been created successfully'));
    }
  });
  return pathName;
};

const copyDirectory = (source: string, target: string): void => {
  fs.cp(source, target, { recursive: true }, (err) => {
    if (err) {
      console.log(chalk.red('The directory has not been created successfully'));
      console.error(err);
      process.exit(1);
    }
  });
};

const replaceValueInEnvFile = (localPath: string, key: string, value: string): void => {
  const envFile = path.join(localPath, '.env');
  createEnvFile(envFile, `${key}=${value}`);
  if (fs.readFileSync(envFile, 'utf8').toString() === (`${key}=${value}`)) {
    /* eslint-disable max-len */
    console.log(`Database connection string has been updated successfully. \n\n 
    The directory has been copied successfully. Your application has been generated. 
    \n\nYou can start it with\n\n ${chalk.blueBright('yarn install && yarn build && yarn start')} \n\n
    You can login using ${chalk.blueBright('admin@example.com')} / ${chalk.blueBright('password')}. \n\n
    You can modify authentication method by editing ${chalk.blueBright('src/app.ts')}\n\n
    ${chalk.yellow('Before deploying your app, please set POSTGRES_DATABASE_URL environment variable in AdminJS Cloud dashboard.')}\n\n
    ${chalk.blueBright('https://docs.adminjs.co/deployment/editing-environment-variables')}\n\n
    ${chalk.red('Do not include .env file if it contains confidential data.')}
    `);
    /* eslint-enable max-len */
  } else {
    console.log(chalk.red('The directory has not been created successfully'));
    process.exit(1);
  }
};

const createEnvFile = (localPath: string, data: string): void => {
  fs.writeFileSync(localPath, [data].join(os.EOL), { encoding: 'utf8', flag: 'w' });
};

export default create;
